/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface ArbitrumSvg {
    }
    interface AvalancheSvg {
    }
    interface BaseSvg {
    }
    interface BscSvg {
    }
    interface ChainSelector {
        /**
          * The current active chain
         */
        "activeChain"?: string;
        /**
          * Chain names to render
         */
        "chains": string;
        /**
          * Size of chain icons
         */
        "iconSize": string;
    }
    interface DaiSvg {
    }
    interface EthereumSvg {
    }
    interface IconContainer {
        /**
          * The name of the icon to display
         */
        "icon": string;
        /**
          * size of the icon
         */
        "size": string;
    }
    interface OptimismSvg {
    }
    interface PactsLink {
        /**
          * Size of the pacts font
         */
        "fontSize": string;
        /**
          * Size for the pacts icon
         */
        "iconSize": string;
    }
    interface PactsRow {
        /**
          * Size for the pacts icon
         */
        "iconSize": string;
        /**
          * Token name to display
         */
        "token": string;
    }
    interface PactsSvg {
    }
    interface PolygonSvg {
    }
    interface UsdcSvg {
    }
    interface UsdtSvg {
    }
    interface WbtcSvg {
    }
}
export interface ChainSelectorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChainSelectorElement;
}
declare global {
    interface HTMLArbitrumSvgElement extends Components.ArbitrumSvg, HTMLStencilElement {
    }
    var HTMLArbitrumSvgElement: {
        prototype: HTMLArbitrumSvgElement;
        new (): HTMLArbitrumSvgElement;
    };
    interface HTMLAvalancheSvgElement extends Components.AvalancheSvg, HTMLStencilElement {
    }
    var HTMLAvalancheSvgElement: {
        prototype: HTMLAvalancheSvgElement;
        new (): HTMLAvalancheSvgElement;
    };
    interface HTMLBaseSvgElement extends Components.BaseSvg, HTMLStencilElement {
    }
    var HTMLBaseSvgElement: {
        prototype: HTMLBaseSvgElement;
        new (): HTMLBaseSvgElement;
    };
    interface HTMLBscSvgElement extends Components.BscSvg, HTMLStencilElement {
    }
    var HTMLBscSvgElement: {
        prototype: HTMLBscSvgElement;
        new (): HTMLBscSvgElement;
    };
    interface HTMLChainSelectorElementEventMap {
        "chainSelected": number;
    }
    interface HTMLChainSelectorElement extends Components.ChainSelector, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChainSelectorElementEventMap>(type: K, listener: (this: HTMLChainSelectorElement, ev: ChainSelectorCustomEvent<HTMLChainSelectorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChainSelectorElementEventMap>(type: K, listener: (this: HTMLChainSelectorElement, ev: ChainSelectorCustomEvent<HTMLChainSelectorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChainSelectorElement: {
        prototype: HTMLChainSelectorElement;
        new (): HTMLChainSelectorElement;
    };
    interface HTMLDaiSvgElement extends Components.DaiSvg, HTMLStencilElement {
    }
    var HTMLDaiSvgElement: {
        prototype: HTMLDaiSvgElement;
        new (): HTMLDaiSvgElement;
    };
    interface HTMLEthereumSvgElement extends Components.EthereumSvg, HTMLStencilElement {
    }
    var HTMLEthereumSvgElement: {
        prototype: HTMLEthereumSvgElement;
        new (): HTMLEthereumSvgElement;
    };
    interface HTMLIconContainerElement extends Components.IconContainer, HTMLStencilElement {
    }
    var HTMLIconContainerElement: {
        prototype: HTMLIconContainerElement;
        new (): HTMLIconContainerElement;
    };
    interface HTMLOptimismSvgElement extends Components.OptimismSvg, HTMLStencilElement {
    }
    var HTMLOptimismSvgElement: {
        prototype: HTMLOptimismSvgElement;
        new (): HTMLOptimismSvgElement;
    };
    interface HTMLPactsLinkElement extends Components.PactsLink, HTMLStencilElement {
    }
    var HTMLPactsLinkElement: {
        prototype: HTMLPactsLinkElement;
        new (): HTMLPactsLinkElement;
    };
    interface HTMLPactsRowElement extends Components.PactsRow, HTMLStencilElement {
    }
    var HTMLPactsRowElement: {
        prototype: HTMLPactsRowElement;
        new (): HTMLPactsRowElement;
    };
    interface HTMLPactsSvgElement extends Components.PactsSvg, HTMLStencilElement {
    }
    var HTMLPactsSvgElement: {
        prototype: HTMLPactsSvgElement;
        new (): HTMLPactsSvgElement;
    };
    interface HTMLPolygonSvgElement extends Components.PolygonSvg, HTMLStencilElement {
    }
    var HTMLPolygonSvgElement: {
        prototype: HTMLPolygonSvgElement;
        new (): HTMLPolygonSvgElement;
    };
    interface HTMLUsdcSvgElement extends Components.UsdcSvg, HTMLStencilElement {
    }
    var HTMLUsdcSvgElement: {
        prototype: HTMLUsdcSvgElement;
        new (): HTMLUsdcSvgElement;
    };
    interface HTMLUsdtSvgElement extends Components.UsdtSvg, HTMLStencilElement {
    }
    var HTMLUsdtSvgElement: {
        prototype: HTMLUsdtSvgElement;
        new (): HTMLUsdtSvgElement;
    };
    interface HTMLWbtcSvgElement extends Components.WbtcSvg, HTMLStencilElement {
    }
    var HTMLWbtcSvgElement: {
        prototype: HTMLWbtcSvgElement;
        new (): HTMLWbtcSvgElement;
    };
    interface HTMLElementTagNameMap {
        "arbitrum-svg": HTMLArbitrumSvgElement;
        "avalanche-svg": HTMLAvalancheSvgElement;
        "base-svg": HTMLBaseSvgElement;
        "bsc-svg": HTMLBscSvgElement;
        "chain-selector": HTMLChainSelectorElement;
        "dai-svg": HTMLDaiSvgElement;
        "ethereum-svg": HTMLEthereumSvgElement;
        "icon-container": HTMLIconContainerElement;
        "optimism-svg": HTMLOptimismSvgElement;
        "pacts-link": HTMLPactsLinkElement;
        "pacts-row": HTMLPactsRowElement;
        "pacts-svg": HTMLPactsSvgElement;
        "polygon-svg": HTMLPolygonSvgElement;
        "usdc-svg": HTMLUsdcSvgElement;
        "usdt-svg": HTMLUsdtSvgElement;
        "wbtc-svg": HTMLWbtcSvgElement;
    }
}
declare namespace LocalJSX {
    interface ArbitrumSvg {
    }
    interface AvalancheSvg {
    }
    interface BaseSvg {
    }
    interface BscSvg {
    }
    interface ChainSelector {
        /**
          * The current active chain
         */
        "activeChain"?: string;
        /**
          * Chain names to render
         */
        "chains"?: string;
        /**
          * Size of chain icons
         */
        "iconSize"?: string;
        /**
          * Event emitted when chain is selected
         */
        "onChainSelected"?: (event: ChainSelectorCustomEvent<number>) => void;
    }
    interface DaiSvg {
    }
    interface EthereumSvg {
    }
    interface IconContainer {
        /**
          * The name of the icon to display
         */
        "icon"?: string;
        /**
          * size of the icon
         */
        "size"?: string;
    }
    interface OptimismSvg {
    }
    interface PactsLink {
        /**
          * Size of the pacts font
         */
        "fontSize"?: string;
        /**
          * Size for the pacts icon
         */
        "iconSize"?: string;
    }
    interface PactsRow {
        /**
          * Size for the pacts icon
         */
        "iconSize"?: string;
        /**
          * Token name to display
         */
        "token"?: string;
    }
    interface PactsSvg {
    }
    interface PolygonSvg {
    }
    interface UsdcSvg {
    }
    interface UsdtSvg {
    }
    interface WbtcSvg {
    }
    interface IntrinsicElements {
        "arbitrum-svg": ArbitrumSvg;
        "avalanche-svg": AvalancheSvg;
        "base-svg": BaseSvg;
        "bsc-svg": BscSvg;
        "chain-selector": ChainSelector;
        "dai-svg": DaiSvg;
        "ethereum-svg": EthereumSvg;
        "icon-container": IconContainer;
        "optimism-svg": OptimismSvg;
        "pacts-link": PactsLink;
        "pacts-row": PactsRow;
        "pacts-svg": PactsSvg;
        "polygon-svg": PolygonSvg;
        "usdc-svg": UsdcSvg;
        "usdt-svg": UsdtSvg;
        "wbtc-svg": WbtcSvg;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "arbitrum-svg": LocalJSX.ArbitrumSvg & JSXBase.HTMLAttributes<HTMLArbitrumSvgElement>;
            "avalanche-svg": LocalJSX.AvalancheSvg & JSXBase.HTMLAttributes<HTMLAvalancheSvgElement>;
            "base-svg": LocalJSX.BaseSvg & JSXBase.HTMLAttributes<HTMLBaseSvgElement>;
            "bsc-svg": LocalJSX.BscSvg & JSXBase.HTMLAttributes<HTMLBscSvgElement>;
            "chain-selector": LocalJSX.ChainSelector & JSXBase.HTMLAttributes<HTMLChainSelectorElement>;
            "dai-svg": LocalJSX.DaiSvg & JSXBase.HTMLAttributes<HTMLDaiSvgElement>;
            "ethereum-svg": LocalJSX.EthereumSvg & JSXBase.HTMLAttributes<HTMLEthereumSvgElement>;
            "icon-container": LocalJSX.IconContainer & JSXBase.HTMLAttributes<HTMLIconContainerElement>;
            "optimism-svg": LocalJSX.OptimismSvg & JSXBase.HTMLAttributes<HTMLOptimismSvgElement>;
            "pacts-link": LocalJSX.PactsLink & JSXBase.HTMLAttributes<HTMLPactsLinkElement>;
            "pacts-row": LocalJSX.PactsRow & JSXBase.HTMLAttributes<HTMLPactsRowElement>;
            "pacts-svg": LocalJSX.PactsSvg & JSXBase.HTMLAttributes<HTMLPactsSvgElement>;
            "polygon-svg": LocalJSX.PolygonSvg & JSXBase.HTMLAttributes<HTMLPolygonSvgElement>;
            "usdc-svg": LocalJSX.UsdcSvg & JSXBase.HTMLAttributes<HTMLUsdcSvgElement>;
            "usdt-svg": LocalJSX.UsdtSvg & JSXBase.HTMLAttributes<HTMLUsdtSvgElement>;
            "wbtc-svg": LocalJSX.WbtcSvg & JSXBase.HTMLAttributes<HTMLWbtcSvgElement>;
        }
    }
}
